## Expression simplifier
Something that will simplify expressions at compile time will greatly simplify implementaiton!

For instance: string.Format(Format, GetStableFunction()); will be easily analyzed to
string.Format("{0}{1}", 1); if Format is a const and GetStableFunction() is a constant function!
(OK, function simplification is a next step, but for many cases it would be very helpful!)

DONE: if (foo); suppored by csc

if (foo)
  s1;
  s2;

DONE: Regex validity

DONE: Switch completeness (if default throws invalid operation or has Debug/Contract.assert)
DONE: Check for redundant cases on enums done by ctor!

DONE: Disable (remove) assignment-free object construction (could be if type is pure!!!)
DONE Enable for structs (default ctors on structs!!) 

DONE: Make swallowed exceptions just an info message (this is not even a warning!)

DONE: Make rule that will warn if ex.Message was used in catch(Exception)

DONE: Enumerable.Range is working, but Directory.CreateInstance also considered pure! Add checks to cover only immutable/pure type factories.

Additional rule:
 - DONE: Not call default ctor on struct (one example: immutable array). Add attribute to check!

Add support for Diagnostic.Create for formatting string!
Add a hint for switch rule that will warn if switchable expression doesn't used in error message.

Analyzer for NunitRoslynRunner (check code that should have code markers for HasDiagnostic and no marker for NoDiagnsotic.)

Don't call default constructor on some structs (add Immutable array and your custom attribute).

Add support for pure methods for IObservable interface! But need to think about it!