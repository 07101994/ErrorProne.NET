## Expression simplifier
Something that will simplify expressions at compile time will greatly simplify implementaiton!

For instance: string.Format(Format, GetStableFunction()); will be easily analyzed to
string.Format("{0}{1}", 1); if Format is a const and GetStableFunction() is a constant function!
(OK, function simplification is a next step, but for many cases it would be very helpful!)

DONE: if (foo); suppored by csc

DONE: Regex validity

DONE: Switch completeness (if default throws invalid operation or has Debug/Contract.assert)
DONE: Check for redundant cases on enums done by ctor!

DONE: Disable (remove) assignment-free object construction (could be if type is pure!!!)
DONE Enable for structs (default ctors on structs!!) 

DONE: Make swallowed exceptions just an info message (this is not even a warning!)

DONE: Make rule that will warn if ex.Message was used in catch(Exception)

DONE: Enumerable.Range is working, but Directory.CreateInstance also considered pure! Add checks to cover only immutable/pure type factories.

Additional rule:
 - DONE: Not call default ctor on struct (one example: immutable array). Add attribute to check!

Add support for Diagnostic.Create for formatting string!
(maybe I can analyze even if rule is not marked with readonly but if it is private and nobody changes it in the class?!)

Add a hint for switch rule that will warn if switchable expression doesn't used in error message.

Analyzer for NunitRoslynRunner (check code that should have code markers for HasDiagnostic and no marker for NoDiagnsotic.)

Don't call default constructor on some structs (add Immutable array and your custom attribute).
Rule for not using default constructor on struct. Add attribute and add well-known types like iterators, immutable array.

Add support for pure methods for IObservable interface! But need to think about it!

Avoid async-void methods (enable them only on forms)

Exception handling: 
- Invalid preconditions for async and iterator blocks
- Complex: exceptions in thread.Start methods (required complex analysis + need to analyze external annotation to understand BCL exceptions)

Rules for suggesting some interesting stuff about internal representation of the class/struct:
- If struct has no non-readonly fields, suggest to mark it with 'immutable' attribute.
- Warn if struct is mark with immutable attribute but has non-readonly fields that are non-readonly

Scoping
 Add attributes that can enforce some rules. Like DisallowExceptionSwallowing and the rule will fail as error (it sounds like more general stuff. Maybe one attribute: EnforceRule that will enforce the rule?)

Find identical subexpressions in condition
Find identical blocks in if-else

if (foo)
  s1;
  s2;

Expression simplifier (const expression folder + simplification of the analysis)

DONE: Readonly property was never assigned
DONE:   Should the same rule be applied for public X {get; private set;} ? I think so!
DONE: Readonly field was never assigned (this one built-in into the compiler!)

Add ReadOnly attribute that will enforce all the existing rules but will not require field to be actually readonly.
Another thing, this attribute could be used instead of readonly fields and it will prevent from redunant copies!
Could be useful to avoid perf impact on accessing readonly structs!!!
Private field was never used
Q: WTF I see compilation warning for unassigned field, but I can't see a warning before running the compilation!

Infrastructure:
Unit test should fail if the sample will fail to compile!

Add statistic to cli tool!

Ok, it seems that special kind of analyzers is required that will duplicate warnings from C# compiler but will show them immediately!!
: Field never assigned (readonly/regular)
Field is never used
Custom: property is never used